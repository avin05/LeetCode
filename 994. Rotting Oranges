class Solution {
    public class OPair{
        int x;
        int y;
        int t;
        
        public OPair(int x,int y,int t){
            this.x=x;
            this.y=y;
            this.t=t;
        }
    }
    public int orangesRotting(int[][] grid) {
        Queue<OPair> qu = new LinkedList<>();
        int oranges=0;
        
        for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid[0].length;j++){
                if(grid[i][j]==2){
                    oranges++;
                    qu.add(new OPair(i,j,0));
                }
                else if(grid[i][j]==1){
                    oranges++;
                }
            }
        }
        if(oranges == 0)
            return 0;
        
        int time =-1;
        
        while(qu.size()>0){
            
            int sz = qu.size();
            
            while(sz-->0){
            OPair rem = qu.remove();
            
            if(grid[rem.x][rem.y]==-1){
                continue;
            }
            
            grid[rem.x][rem.y]=-1;
            time = rem.t;
            oranges--;
            int[] xdir = {-1,0,1,0};
            int[] ydir = {0,-1,0,1};
                
            for(int d =0;d<4;d++){
            int r = rem.x+xdir[d];
            int c = rem.y+ydir[d];
                
            if(r>=0 && r<grid.length && c>=0 && c<grid[0].length && grid[r][c]==1){
                qu.add(new OPair(r,c,rem.t+1));
                    }
                }
                
                
            
            }
        }
        
        return oranges==0?time:-1;
    }
}

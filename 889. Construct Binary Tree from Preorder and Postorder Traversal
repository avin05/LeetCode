/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode construct(int[] pre,int[] post,int preSt,int preEnd,int postSt,int postEnd){
        //ye base case kyuki preST+1 check kar rhe
        if(preSt == preEnd){
            return new TreeNode(pre[preSt]);
        }
        if(preSt> preEnd){
            return null;
        }
        
        TreeNode root = new TreeNode(pre[preSt]);
        int ele = pre[preSt+1];
        int indx = postSt;
        while(post[indx]!=ele){
            indx++;
        }
        int element = indx - postSt+1;
        
        root.left = construct(pre,post,preSt+1,preSt+element,postSt,indx);
        root.right = construct(pre,post,preSt+element+1,preEnd,indx+1,postEnd-1);
        return root;
    }
    public TreeNode constructFromPrePost(int[] preorder, int[] postorder) {
        
        return construct(preorder,postorder,0,preorder.length-1,0,postorder.length-1);
        
    }
}

--------------------------- Cycle Method------------------------------------------

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode detectCycle(ListNode head) {

        if(head == null || head.next == null){
            return null;
        }

        ListNode slow = head, fast = head;

        while(fast!=null && fast.next!=null){
            fast = fast.next.next;
            slow = slow.next;

            if(fast == slow){
                break;
            }
        }

        if(fast!=slow){
            return null;
        }

        fast = head;

        while(fast!=slow){
            fast = fast.next;
            slow = slow.next;
        }

        return fast;


    }
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        
        ListNode tail = null;
        
        ListNode temp = headA;
        
        while(temp.next!=null){
            temp = temp.next;
        }
        
        tail = temp;
        tail.next = headA;
        
        ListNode ans = detectCycle(headB);
        tail.next = null;
        return ans;
        
        
    }
}

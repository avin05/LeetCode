class Solution {

    public static int[] solveLeft(int[] arr,int n){
    
    int[] res = new int[n];
    Stack<Integer> st = new Stack<>();
    for(int i=0;i<n;i++){
        if(st.isEmpty()){
            st.push(i);
            res[i]= -1;
        }
        
        else if(arr[st.peek()]<arr[i]){
            res[i]=st.peek();
            st.push(i);
        }
        else if(arr[st.peek()]>=arr[i]){
            st.pop();
            i--;
        }
    }
    
    return res;
    
}
public static int[] solveRight(int[] arr,int n){
    
    
    int[] res = new int[n];
    Stack<Integer> st = new Stack<>();
    for(int i=n-1;i>=0;i--){
        if(st.isEmpty()){
            st.push(i);
            res[i]= n;
        }
        
        else if(arr[st.peek()]<arr[i]){
            
            res[i]=st.peek();
            st.push(i);
            
        }
        else if(arr[st.peek()]>=arr[i]){
            st.pop();
            i++;
        }
    }
    
    return res;
    
    
    
}
    
    public int largestRectangleArea(int[] heights) {
       
    int n = heights.length;    
    int[] left = solveLeft(heights,n);
    int[] right = solveRight(heights,n);
    
    int ans = Integer.MIN_VALUE;
    
    for(int i=0;i<n;i++){
        int width = (right[i]-left[i])-1;
        int area = width*heights[i];
        
        if(area>ans){
            ans = area;
        }
    }
    
    return ans;
        
    }
}

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public class Pair implements Comparable<Pair>{
        ListNode node;
        
        public Pair(ListNode node){
            this.node = node;
        }
        
        public int compareTo(Pair o){
            return this.node.val - o.node.val;
        }
        
    }
    public ListNode mergeKLists(ListNode[] lists) {
        
        PriorityQueue<Pair> pq = new PriorityQueue<>();
        
        for(int i = 0;i<lists.length;i++){
            if(lists[i]!=null){
            pq.add(new Pair(lists[i]));
        }
        }
        
        ListNode head = new ListNode(-1);
        ListNode temp = head;
        
        while(pq.size()>0){
            Pair rem = pq.remove();
            temp.next = rem.node;
            temp = temp.next;
            
            if(rem.node.next!=null){
                pq.add(new Pair(rem.node.next));
            }
        }
        
        return head.next;
        
    }
}

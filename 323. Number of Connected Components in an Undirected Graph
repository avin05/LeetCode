class Solution {
    public void dfs(int i, List<List<Integer>> graph, boolean[] visited){
        visited[i] = true;
        for(int next: graph.get(i)){
            if(!visited[next]){
                dfs(next,graph,visited);
            }
        }
    }
    public int countComponents(int n, int[][] edges) {
        List<List<Integer>> graph = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            graph.add(new ArrayList<>());
        }

        for (int[] edge : edges) {
            int u = edge[0];
            int v = edge[1];

            graph.get(u).add(v);
            graph.get(v).add(u);
        }

        boolean[] visited = new boolean[n];
        int connected = 0;
        for (int i = 0; i < n; i++) {
            if (!visited[i]) {
                dfs(i, graph, visited);
                connected++;
            }

        }

        return connected;
    }
}

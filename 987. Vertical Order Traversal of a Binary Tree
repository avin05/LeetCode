/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public  int left =0;
    public  int right =0;
     class Pair{
        TreeNode node;
        int count;
        public Pair(TreeNode node,int count){
            this.node = node;
            this.count = count;
        }
    }
     public  void width(TreeNode root, int count) {
        if(root == null) return;

        if(count < left) {
            left = count;
        } else if(count > right) {
            right = count;
        }

        width(root.left, count - 1);
        width(root.right, count + 1);
    }

    public  int width(TreeNode root) {
        if(root == null) return 0;
       
        width(root, 0);
        return right - left + 1;
    }
    public List<List<Integer>> verticalTraversal(TreeNode root) {
        int wd = width(root);
        List<List<Integer>> res = new ArrayList<>();
        for(int i = 0; i < wd; i++)
            res.add(new ArrayList<>());

        PriorityQueue<Pair> mainQ = new PriorityQueue<>((a,b)->{
            return a.node.val-b.node.val;
        });
            PriorityQueue<Pair> childQ = new PriorityQueue<>((a,b)->{
            return a.node.val-b.node.val;
            });
            
            mainQ.add(new Pair(root, Math.abs(left)));

            while(mainQ.size() > 0) {
                while(mainQ.size() > 0) {
                    Pair rem = mainQ.remove();
                    res.get(rem.count).add(rem.node.val);

                    if(rem.node.left != null) {
                        childQ.add(new Pair(rem.node.left, rem.count - 1));
                    }
                    if(rem.node.right != null) {
                        childQ.add(new Pair(rem.node.right, rem.count + 1));
                    }
                }
                // swap the queues
                PriorityQueue<Pair> temp = mainQ;
                mainQ = childQ;
                childQ = temp;
            }
            return res;
    }
}

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode findMid(ListNode head) {
        if(head == null)
            return head;
        ListNode t = head, h = head;
        
        while(h.next!=null && h.next.next!=null){
            h=h.next.next;
            t=t.next;
        }
        
        return t;
        
    }
    public ListNode mergeList(ListNode l1,ListNode l2){
        if(l1 == null || l2 == null){
            return l1 == null?l2:l1;
        }
        
        ListNode head = new ListNode(-1);
        ListNode temp = head,t1= l1,t2 = l2;
        while(t1!=null && t2!=null){
            if(t1.val<=t2.val){
                temp.next = t1;
                temp = t1;
                t1 = t1.next;
            }else{
                temp.next = t2;
                temp = t2;
                t2 = t2.next;
            }
            
        }
        
        temp.next = t1 == null?t2:t1;
        
        return head.next;
        
    }
    public ListNode sortList(ListNode head) {
        
        if(head == null || head.next == null){
            return head;
        }
        
        ListNode mid = findMid(head);
        ListNode head2 = mid.next;
        mid.next = null;
        
        head = sortList(head);
        head2 = sortList(head2);
        
        ListNode res = mergeList(head,head2);
        
        return res;
        
    }
}
